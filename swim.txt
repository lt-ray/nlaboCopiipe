local player = game.Players.LocalPlayer
local userInputService = game:GetService("UserInputService")

local runSpeed = 40
local walkSpeed = 16
local swimSpeed = 30
local swimWalkSpeed = 15

local normalJumpPower = 50
local boostedJumpPower = 80

player.CharacterAdded:Connect(function(character)
	local humanoid = character:WaitForChild("Humanoid")

	humanoid.WalkSpeed = walkSpeed
	humanoid.JumpPower = normalJumpPower

	userInputService.InputBegan:Connect(function(input, gameProcessed)
		if input.KeyCode == Enum.KeyCode.LeftShift and not gameProcessed then
			local state = humanoid:GetState()
			if state == Enum.HumanoidStateType.Swimming then
				humanoid.WalkSpeed = swimSpeed
			else
				humanoid.WalkSpeed = runSpeed
			end
			humanoid.JumpPower = boostedJumpPower
		end
	end)

	userInputService.InputEnded:Connect(function(input, gameProcessed)
		if input.KeyCode == Enum.KeyCode.LeftShift and not gameProcessed then
			local state = humanoid:GetState()
			if state == Enum.HumanoidStateType.Swimming then
				humanoid.WalkSpeed = swimWalkSpeed
			else
				humanoid.WalkSpeed = walkSpeed
			end
			humanoid.JumpPower = normalJumpPower
		end
	end)

	humanoid.StateChanged:Connect(function(_, newState)
		if newState == Enum.HumanoidStateType.Swimming then
			if userInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
				humanoid.WalkSpeed = swimSpeed
				humanoid.JumpPower = boostedJumpPower
			else
				humanoid.WalkSpeed = swimWalkSpeed
				humanoid.JumpPower = normalJumpPower
			end
		elseif newState == Enum.HumanoidStateType.Running or newState == Enum.HumanoidStateType.Walking then
			if userInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
				humanoid.WalkSpeed = runSpeed
				humanoid.JumpPower = boostedJumpPower
			else
				humanoid.WalkSpeed = walkSpeed
				humanoid.JumpPower = normalJumpPower
			end
		end
	end)
end)
